# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `jwt` gem.
# Please instead update this file by running `bin/tapioca gem jwt`.

# JSON Web Token implementation
#
# Should be up to date with the latest spec:
# https://tools.ietf.org/html/rfc7519
#
# source://jwt//lib/jwt/version.rb#4
module JWT
  extend ::JWT::Configuration

  private

  # source://jwt//lib/jwt.rb#33
  def decode(jwt, key = T.unsafe(nil), verify = T.unsafe(nil), options = T.unsafe(nil), &keyfinder); end

  # source://jwt//lib/jwt.rb#26
  def encode(payload, key, algorithm = T.unsafe(nil), header_fields = T.unsafe(nil)); end

  class << self
    # source://jwt//lib/jwt.rb#33
    def decode(jwt, key = T.unsafe(nil), verify = T.unsafe(nil), options = T.unsafe(nil), &keyfinder); end

    # source://jwt//lib/jwt.rb#26
    def encode(payload, key, algorithm = T.unsafe(nil), header_fields = T.unsafe(nil)); end

    # source://jwt//lib/jwt/version.rb#5
    def gem_version; end

    # @return [Boolean]
    #
    # source://jwt//lib/jwt/version.rb#24
    def openssl_3?; end

    # @return [Boolean]
    #
    # source://jwt//lib/jwt/version.rb#38
    def openssl_3_hmac_empty_key_regression?; end

    # source://jwt//lib/jwt/version.rb#42
    def openssl_version; end

    # @return [Boolean]
    #
    # source://jwt//lib/jwt/version.rb#30
    def rbnacl?; end

    # @return [Boolean]
    #
    # source://jwt//lib/jwt/version.rb#34
    def rbnacl_6_or_greater?; end
  end
end

# Base64 encoding and decoding
#
# source://jwt//lib/jwt/base64.rb#7
class JWT::Base64
  class << self
    # source://jwt//lib/jwt/base64.rb#27
    def loose_urlsafe_decode64(str); end

    # Decode a string with URL-safe Base64 complying with RFC 4648.
    # Deprecated support for RFC 2045 remains for now. ("All line breaks or other characters not found in Table 1 must be ignored by decoding software")
    #
    # source://jwt//lib/jwt/base64.rb#16
    def url_decode(str); end

    # Encode a string with URL-safe Base64 complying with RFC 4648 (not padded).
    #
    # source://jwt//lib/jwt/base64.rb#10
    def url_encode(str); end
  end
end

# source://jwt//lib/jwt/error.rb#20
class JWT::Base64DecodeError < ::JWT::DecodeError; end

# JWT Claim verifications
# https://datatracker.ietf.org/doc/html/rfc7519#section-4
#
# Verification is supported for the following claims:
# exp
# nbf
# iss
# iat
# jti
# aud
# sub
# required
# numeric
#
# source://jwt//lib/jwt/claims/audience.rb#4
module JWT::Claims
  class << self
    # Returns the errors in the claims of the JWT token.
    #
    # @param options [Array] the options for verifying the claims.
    # @return [Array<JWT::Claims::Error>] the errors in the claims of the JWT
    #
    # source://jwt//lib/jwt/claims.rb#67
    def payload_errors(payload, *options); end

    # Checks if the claims in the JWT payload are valid.
    #
    # @param payload [Hash] the JWT payload.
    # @param options [Array] the options for verifying the claims.
    # @return [Boolean] true if the claims are valid, false otherwise
    #
    # source://jwt//lib/jwt/claims.rb#59
    def valid_payload?(payload, *options); end

    # @deprecated Use {verify_payload!} instead. Will be removed in the next major version of ruby-jwt.
    #
    # source://jwt//lib/jwt/claims.rb#36
    def verify!(payload, options); end

    # Checks if the claims in the JWT payload are valid.
    #
    # @example
    #
    #   ::JWT::Claims.verify_payload!({"exp" => Time.now.to_i + 10}, :exp)
    #   ::JWT::Claims.verify_payload!({"exp" => Time.now.to_i - 10}, exp: { leeway: 11})
    # @param payload [Hash] the JWT payload.
    # @param options [Array] the options for verifying the claims.
    # @raise [JWT::DecodeError] if any claim is invalid.
    # @return [void]
    #
    # source://jwt//lib/jwt/claims.rb#50
    def verify_payload!(payload, *options); end

    private

    # source://jwt//lib/jwt/claims.rb#77
    def token_errors(token, *options); end

    # source://jwt//lib/jwt/claims.rb#73
    def verify_token!(token, *options); end
  end
end

# source://jwt//lib/jwt/claims/audience.rb#5
class JWT::Claims::Audience
  # @return [Audience] a new instance of Audience
  #
  # source://jwt//lib/jwt/claims/audience.rb#6
  def initialize(expected_audience:); end

  # @raise [JWT::InvalidAudError]
  #
  # source://jwt//lib/jwt/claims/audience.rb#10
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute expected_audience.
  #
  # source://jwt//lib/jwt/claims/audience.rb#17
  def expected_audience; end
end

# Verifiers to support the ::JWT.decode method
#
# @private
#
# source://jwt//lib/jwt/claims/decode_verifier.rb#13
module JWT::Claims::DecodeVerifier
  class << self
    # @private
    #
    # source://jwt//lib/jwt/claims/decode_verifier.rb#29
    def verify!(payload, options); end
  end
end

# source://jwt//lib/jwt/claims/decode_verifier.rb#14
JWT::Claims::DecodeVerifier::VERIFIERS = T.let(T.unsafe(nil), Hash)

# Represents a claim verification error
#
# source://jwt//lib/jwt/claims.rb#32
class JWT::Claims::Error < ::Struct
  # Returns the value of attribute message
  #
  # @return [Object] the current value of message
  def message; end

  # Sets the attribute message
  #
  # @param value [Object] the value to set the attribute message to.
  # @return [Object] the newly set value
  def message=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# source://jwt//lib/jwt/claims/expiration.rb#5
class JWT::Claims::Expiration
  # @return [Expiration] a new instance of Expiration
  #
  # source://jwt//lib/jwt/claims/expiration.rb#6
  def initialize(leeway:); end

  # @raise [JWT::ExpiredSignature]
  #
  # source://jwt//lib/jwt/claims/expiration.rb#10
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute leeway.
  #
  # source://jwt//lib/jwt/claims/expiration.rb#19
  def leeway; end
end

# source://jwt//lib/jwt/claims/issued_at.rb#5
class JWT::Claims::IssuedAt
  # @raise [JWT::InvalidIatError]
  #
  # source://jwt//lib/jwt/claims/issued_at.rb#6
  def verify!(context:, **_args); end
end

# source://jwt//lib/jwt/claims/issuer.rb#5
class JWT::Claims::Issuer
  # @return [Issuer] a new instance of Issuer
  #
  # source://jwt//lib/jwt/claims/issuer.rb#6
  def initialize(issuers:); end

  # source://jwt//lib/jwt/claims/issuer.rb#10
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute issuers.
  #
  # source://jwt//lib/jwt/claims/issuer.rb#21
  def issuers; end
end

# source://jwt//lib/jwt/claims/jwt_id.rb#5
class JWT::Claims::JwtId
  # @return [JwtId] a new instance of JwtId
  #
  # source://jwt//lib/jwt/claims/jwt_id.rb#6
  def initialize(validator:); end

  # source://jwt//lib/jwt/claims/jwt_id.rb#10
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute validator.
  #
  # source://jwt//lib/jwt/claims/jwt_id.rb#22
  def validator; end
end

# source://jwt//lib/jwt/claims/not_before.rb#5
class JWT::Claims::NotBefore
  # @return [NotBefore] a new instance of NotBefore
  #
  # source://jwt//lib/jwt/claims/not_before.rb#6
  def initialize(leeway:); end

  # @raise [JWT::ImmatureSignature]
  #
  # source://jwt//lib/jwt/claims/not_before.rb#10
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute leeway.
  #
  # source://jwt//lib/jwt/claims/not_before.rb#19
  def leeway; end
end

# source://jwt//lib/jwt/claims/numeric.rb#5
class JWT::Claims::Numeric
  # source://jwt//lib/jwt/claims/numeric.rb#28
  def verify!(context:); end

  private

  # @raise [InvalidPayload]
  #
  # source://jwt//lib/jwt/claims/numeric.rb#44
  def validate_is_numeric(payload, claim); end

  # source://jwt//lib/jwt/claims/numeric.rb#38
  def validate_numeric_claims(payload); end

  class << self
    # source://jwt//lib/jwt/claims/numeric.rb#22
    def new(*args); end

    # source://jwt//lib/jwt/claims/numeric.rb#32
    def verify!(payload:, **_args); end
  end
end

# source://jwt//lib/jwt/claims/numeric.rb#6
class JWT::Claims::Numeric::Compat
  # @return [Compat] a new instance of Compat
  #
  # source://jwt//lib/jwt/claims/numeric.rb#7
  def initialize(payload); end

  # source://jwt//lib/jwt/claims/numeric.rb#11
  def verify!; end
end

# source://jwt//lib/jwt/claims/numeric.rb#16
JWT::Claims::Numeric::NUMERIC_CLAIMS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/claims/required.rb#5
class JWT::Claims::Required
  # @return [Required] a new instance of Required
  #
  # source://jwt//lib/jwt/claims/required.rb#6
  def initialize(required_claims:); end

  # source://jwt//lib/jwt/claims/required.rb#10
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute required_claims.
  #
  # source://jwt//lib/jwt/claims/required.rb#20
  def required_claims; end
end

# source://jwt//lib/jwt/claims/subject.rb#5
class JWT::Claims::Subject
  # @return [Subject] a new instance of Subject
  #
  # source://jwt//lib/jwt/claims/subject.rb#6
  def initialize(expected_subject:); end

  # @raise [JWT::InvalidSubError]
  #
  # source://jwt//lib/jwt/claims/subject.rb#10
  def verify!(context:, **_args); end

  private

  # Returns the value of attribute expected_subject.
  #
  # source://jwt//lib/jwt/claims/subject.rb#17
  def expected_subject; end
end

# Context class to contain the data passed to individual claim validators
#
# @private
#
# source://jwt//lib/jwt/claims/decode_verifier.rb#8
class JWT::Claims::VerificationContext < ::Struct
  # Returns the value of attribute payload
  #
  # @return [Object] the current value of payload
  def payload; end

  # Sets the attribute payload
  #
  # @param value [Object] the value to set the attribute payload to.
  # @return [Object] the newly set value
  def payload=(_); end

  class << self
    def [](*_arg0); end
    def inspect; end
    def keyword_init?; end
    def members; end
    def new(*_arg0); end
  end
end

# @private
#
# source://jwt//lib/jwt/claims/verifier.rb#6
module JWT::Claims::Verifier
  class << self
    # @private
    #
    # source://jwt//lib/jwt/claims/verifier.rb#32
    def errors(context, *options); end

    # @private
    #
    # source://jwt//lib/jwt/claims/verifier.rb#43
    def iterate_verifiers(*options); end

    # @private
    #
    # source://jwt//lib/jwt/claims/verifier.rb#24
    def verify!(context, *options); end

    private

    # source://jwt//lib/jwt/claims/verifier.rb#55
    def verify_one!(context, verifier, options); end
  end
end

# source://jwt//lib/jwt/claims/verifier.rb#7
JWT::Claims::Verifier::VERIFIERS = T.let(T.unsafe(nil), Hash)

# source://jwt//lib/jwt/claims_validator.rb#6
class JWT::ClaimsValidator
  # @return [ClaimsValidator] a new instance of ClaimsValidator
  #
  # source://jwt//lib/jwt/claims_validator.rb#7
  def initialize(payload); end

  # source://jwt//lib/jwt/claims_validator.rb#11
  def validate!; end
end

# source://jwt//lib/jwt/configuration/decode_configuration.rb#4
module JWT::Configuration
  # source://jwt//lib/jwt/configuration.rb#11
  def configuration; end

  # @yield [configuration]
  #
  # source://jwt//lib/jwt/configuration.rb#7
  def configure; end
end

# source://jwt//lib/jwt/configuration/container.rb#8
class JWT::Configuration::Container
  # @return [Container] a new instance of Container
  #
  # source://jwt//lib/jwt/configuration/container.rb#12
  def initialize; end

  # Returns the value of attribute decode.
  #
  # source://jwt//lib/jwt/configuration/container.rb#9
  def decode; end

  # Sets the attribute decode
  #
  # @param value the value to set the attribute decode to.
  #
  # source://jwt//lib/jwt/configuration/container.rb#9
  def decode=(_arg0); end

  # Returns the value of attribute deprecation_warnings.
  #
  # source://jwt//lib/jwt/configuration/container.rb#10
  def deprecation_warnings; end

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/configuration/container.rb#25
  def deprecation_warnings=(value); end

  # Returns the value of attribute jwk.
  #
  # source://jwt//lib/jwt/configuration/container.rb#9
  def jwk; end

  # Sets the attribute jwk
  #
  # @param value the value to set the attribute jwk to.
  #
  # source://jwt//lib/jwt/configuration/container.rb#9
  def jwk=(_arg0); end

  # source://jwt//lib/jwt/configuration/container.rb#16
  def reset!; end

  # Returns the value of attribute strict_base64_decoding.
  #
  # source://jwt//lib/jwt/configuration/container.rb#9
  def strict_base64_decoding; end

  # Sets the attribute strict_base64_decoding
  #
  # @param value the value to set the attribute strict_base64_decoding to.
  #
  # source://jwt//lib/jwt/configuration/container.rb#9
  def strict_base64_decoding=(_arg0); end
end

# source://jwt//lib/jwt/configuration/container.rb#24
JWT::Configuration::Container::DEPRECATION_WARNINGS_VALUES = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/configuration/decode_configuration.rb#5
class JWT::Configuration::DecodeConfiguration
  # @return [DecodeConfiguration] a new instance of DecodeConfiguration
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#17
  def initialize; end

  # Returns the value of attribute algorithms.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def algorithms; end

  # Sets the attribute algorithms
  #
  # @param value the value to set the attribute algorithms to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def algorithms=(_arg0); end

  # Returns the value of attribute leeway.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def leeway; end

  # Sets the attribute leeway
  #
  # @param value the value to set the attribute leeway to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def leeway=(_arg0); end

  # Returns the value of attribute required_claims.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def required_claims; end

  # Sets the attribute required_claims
  #
  # @param value the value to set the attribute required_claims to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def required_claims=(_arg0); end

  # source://jwt//lib/jwt/configuration/decode_configuration.rb#30
  def to_h; end

  # Returns the value of attribute verify_aud.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_aud; end

  # Sets the attribute verify_aud
  #
  # @param value the value to set the attribute verify_aud to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_aud=(_arg0); end

  # Returns the value of attribute verify_expiration.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_expiration; end

  # Sets the attribute verify_expiration
  #
  # @param value the value to set the attribute verify_expiration to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_expiration=(_arg0); end

  # Returns the value of attribute verify_iat.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_iat; end

  # Sets the attribute verify_iat
  #
  # @param value the value to set the attribute verify_iat to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_iat=(_arg0); end

  # Returns the value of attribute verify_iss.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_iss; end

  # Sets the attribute verify_iss
  #
  # @param value the value to set the attribute verify_iss to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_iss=(_arg0); end

  # Returns the value of attribute verify_jti.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_jti; end

  # Sets the attribute verify_jti
  #
  # @param value the value to set the attribute verify_jti to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_jti=(_arg0); end

  # Returns the value of attribute verify_not_before.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_not_before; end

  # Sets the attribute verify_not_before
  #
  # @param value the value to set the attribute verify_not_before to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_not_before=(_arg0); end

  # Returns the value of attribute verify_sub.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_sub; end

  # Sets the attribute verify_sub
  #
  # @param value the value to set the attribute verify_sub to.
  #
  # source://jwt//lib/jwt/configuration/decode_configuration.rb#6
  def verify_sub=(_arg0); end
end

# source://jwt//lib/jwt/configuration/jwk_configuration.rb#8
class JWT::Configuration::JwkConfiguration
  # @return [JwkConfiguration] a new instance of JwkConfiguration
  #
  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#9
  def initialize; end

  # Returns the value of attribute kid_generator.
  #
  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#24
  def kid_generator; end

  # Sets the attribute kid_generator
  #
  # @param value the value to set the attribute kid_generator to.
  #
  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#24
  def kid_generator=(_arg0); end

  # source://jwt//lib/jwt/configuration/jwk_configuration.rb#13
  def kid_generator_type=(value); end
end

# Decoding logic for JWT
#
# source://jwt//lib/jwt/decode.rb#9
class JWT::Decode
  # @raise [JWT::DecodeError]
  # @return [Decode] a new instance of Decode
  #
  # source://jwt//lib/jwt/decode.rb#10
  def initialize(jwt, key, verify, options, &keyfinder); end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#22
  def decode_segments; end

  private

  # source://jwt//lib/jwt/decode.rb#138
  def alg_in_header; end

  # source://jwt//lib/jwt/decode.rb#89
  def allowed_algorithms; end

  # source://jwt//lib/jwt/decode.rb#71
  def allowed_and_valid_algorithms; end

  # source://jwt//lib/jwt/decode.rb#134
  def decode_signature; end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#106
  def find_key(&keyfinder); end

  # source://jwt//lib/jwt/decode.rb#81
  def given_algorithms; end

  # source://jwt//lib/jwt/decode.rb#142
  def header; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/decode.rb#130
  def none_algorithm?; end

  # source://jwt//lib/jwt/decode.rb#154
  def parse_and_decode(segment); end

  # source://jwt//lib/jwt/decode.rb#146
  def payload; end

  # source://jwt//lib/jwt/decode.rb#93
  def resolve_allowed_algorithms; end

  # source://jwt//lib/jwt/decode.rb#126
  def segment_length; end

  # source://jwt//lib/jwt/decode.rb#57
  def set_key; end

  # source://jwt//lib/jwt/decode.rb#150
  def signing_input; end

  # Move algorithms matching the JWT alg header to the beginning of the list
  #
  # source://jwt//lib/jwt/decode.rb#100
  def sort_by_alg_header(algs); end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#118
  def validate_segment_count!; end

  # @raise [JWT::IncorrectAlgorithm]
  #
  # source://jwt//lib/jwt/decode.rb#50
  def verify_algo; end

  # source://jwt//lib/jwt/decode.rb#114
  def verify_claims; end

  # @raise [JWT::DecodeError]
  #
  # source://jwt//lib/jwt/decode.rb#38
  def verify_signature; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/decode.rb#65
  def verify_signature_for?(key); end
end

# Order is very important - first check for string keys, next for symbols
#
# source://jwt//lib/jwt/decode.rb#76
JWT::Decode::ALGORITHM_KEYS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/error.rb#5
class JWT::DecodeError < ::StandardError; end

# Deprecations module to handle deprecation warnings in the gem
#
# source://jwt//lib/jwt/deprecations.rb#5
module JWT::Deprecations
  class << self
    # source://jwt//lib/jwt/deprecations.rb#7
    def context; end

    # source://jwt//lib/jwt/deprecations.rb#31
    def emit_warnings; end

    # source://jwt//lib/jwt/deprecations.rb#27
    def store(message); end

    # source://jwt//lib/jwt/deprecations.rb#13
    def warning(message, only_if_valid: T.unsafe(nil)); end

    private

    # source://jwt//lib/jwt/deprecations.rb#39
    def record_warned(message); end
  end
end

# Encoding logic for JWT
#
# source://jwt//lib/jwt/encode.rb#8
class JWT::Encode
  # @return [Encode] a new instance of Encode
  #
  # source://jwt//lib/jwt/encode.rb#9
  def initialize(options); end

  # source://jwt//lib/jwt/encode.rb#16
  def segments; end

  private

  # source://jwt//lib/jwt/encode.rb#65
  def combine(*parts); end

  # source://jwt//lib/jwt/encode.rb#61
  def encode_data(data); end

  # source://jwt//lib/jwt/encode.rb#39
  def encode_header; end

  # source://jwt//lib/jwt/encode.rb#43
  def encode_payload; end

  # source://jwt//lib/jwt/encode.rb#57
  def encode_signature; end

  # source://jwt//lib/jwt/encode.rb#23
  def encoded_header; end

  # source://jwt//lib/jwt/encode.rb#35
  def encoded_header_and_payload; end

  # source://jwt//lib/jwt/encode.rb#27
  def encoded_payload; end

  # source://jwt//lib/jwt/encode.rb#31
  def encoded_signature; end

  # source://jwt//lib/jwt/encode.rb#47
  def signature; end

  # source://jwt//lib/jwt/encode.rb#51
  def validate_claims!; end
end

# source://jwt//lib/jwt/error.rb#4
class JWT::EncodeError < ::StandardError; end

# source://jwt//lib/jwt/error.rb#9
class JWT::ExpiredSignature < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#11
class JWT::ImmatureSignature < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#10
class JWT::IncorrectAlgorithm < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#15
class JWT::InvalidAudError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#14
class JWT::InvalidIatError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#12
class JWT::InvalidIssuerError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#17
class JWT::InvalidJtiError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#18
class JWT::InvalidPayload < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#16
class JWT::InvalidSubError < ::JWT::DecodeError; end

# JSON wrapper
#
# source://jwt//lib/jwt/json.rb#7
class JWT::JSON
  class << self
    # source://jwt//lib/jwt/json.rb#9
    def generate(data); end

    # source://jwt//lib/jwt/json.rb#13
    def parse(data); end
  end
end

# source://jwt//lib/jwt/jwa/compat.rb#4
module JWT::JWA
  class << self
    # source://jwt//lib/jwt/jwa.rb#45
    def create(algorithm); end

    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#49
    def find(algo); end

    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#45
    def register_algorithm(algo); end

    # source://jwt//lib/jwt/jwa.rb#34
    def resolve(algorithm); end

    private

    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#55
    def algorithms; end
  end
end

# source://jwt//lib/jwt/jwa/compat.rb#5
module JWT::JWA::Compat
  mixes_in_class_methods ::JWT::JWA::Compat::ClassMethods

  class << self
    # @private
    #
    # source://jwt//lib/jwt/jwa/compat.rb#24
    def included(klass); end
  end
end

# source://jwt//lib/jwt/jwa/compat.rb#6
module JWT::JWA::Compat::ClassMethods
  # source://jwt//lib/jwt/jwa/compat.rb#7
  def from_algorithm(algorithm); end

  # source://jwt//lib/jwt/jwa/compat.rb#11
  def sign(algorithm, msg, key); end

  # source://jwt//lib/jwt/jwa/compat.rb#17
  def verify(algorithm, key, signing_input, signature); end
end

# source://jwt//lib/jwt/jwa/ecdsa.rb#5
class JWT::JWA::Ecdsa
  include ::JWT::JWA::SigningAlgorithm
  include ::JWT::JWA::Compat
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods
  extend ::JWT::JWA::Compat::ClassMethods

  # @return [Ecdsa] a new instance of Ecdsa
  #
  # source://jwt//lib/jwt/jwa/ecdsa.rb#8
  def initialize(alg, digest); end

  # source://jwt//lib/jwt/jwa/ecdsa.rb#13
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/ecdsa.rb#23
  def verify(data:, signature:, verification_key:); end

  private

  # source://jwt//lib/jwt/jwa/ecdsa.rb#87
  def asn1_to_raw(signature, public_key); end

  # source://jwt//lib/jwt/jwa/ecdsa.rb#76
  def curve_by_name(name); end

  # Returns the value of attribute digest.
  #
  # source://jwt//lib/jwt/jwa/ecdsa.rb#74
  def digest; end

  # source://jwt//lib/jwt/jwa/ecdsa.rb#80
  def raw_to_asn1(signature, private_key); end

  class << self
    # source://jwt//lib/jwt/jwa/ecdsa.rb#66
    def curve_by_name(name); end

    # source://jwt//lib/jwt/jwa/ecdsa.rb#62
    def from_algorithm(algorithm); end
  end
end

# source://jwt//lib/jwt/jwa/ecdsa.rb#35
JWT::JWA::Ecdsa::NAMED_CURVES = T.let(T.unsafe(nil), Hash)

# source://jwt//lib/jwt/jwa/hmac.rb#5
class JWT::JWA::Hmac
  include ::JWT::JWA::SigningAlgorithm
  include ::JWT::JWA::Compat
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods
  extend ::JWT::JWA::Compat::ClassMethods

  # @return [Hmac] a new instance of Hmac
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#12
  def initialize(alg, digest); end

  # source://jwt//lib/jwt/jwa/hmac.rb#17
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/hmac.rb#30
  def verify(data:, signature:, verification_key:); end

  private

  # Returns the value of attribute digest.
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#40
  def digest; end

  class << self
    # source://jwt//lib/jwt/jwa/hmac.rb#8
    def from_algorithm(algorithm); end
  end
end

# Copy of https://github.com/rails/rails/blob/v7.0.3.1/activesupport/lib/active_support/security_utils.rb
#
# source://jwt//lib/jwt/jwa/hmac.rb#44
module JWT::JWA::Hmac::SecurityUtils
  private

  # :nocov:
  #
  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#51
  def fixed_length_secure_compare(a, b); end

  # Secure string comparison for strings of variable length.
  #
  # While a timing attack would not be able to discern the content of
  # a secret compared via secure_compare, it is possible to determine
  # the secret length. This should be considered when using secure_compare
  # to compare weak, short secrets to user input.
  #
  # source://jwt//lib/jwt/jwa/hmac.rb#75
  def secure_compare(a, b); end

  class << self
    # :nocov:
    #
    # @raise [ArgumentError]
    #
    # source://jwt//lib/jwt/jwa/hmac.rb#51
    def fixed_length_secure_compare(a, b); end

    # Secure string comparison for strings of variable length.
    #
    # While a timing attack would not be able to discern the content of
    # a secret compared via secure_compare, it is possible to determine
    # the secret length. This should be considered when using secure_compare
    # to compare weak, short secrets to user input.
    #
    # source://jwt//lib/jwt/jwa/hmac.rb#75
    def secure_compare(a, b); end
  end
end

# source://jwt//lib/jwt/jwa/none.rb#5
class JWT::JWA::None
  include ::JWT::JWA::SigningAlgorithm
  include ::JWT::JWA::Compat
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods
  extend ::JWT::JWA::Compat::ClassMethods

  # @return [None] a new instance of None
  #
  # source://jwt//lib/jwt/jwa/none.rb#8
  def initialize; end

  # source://jwt//lib/jwt/jwa/none.rb#12
  def sign(*_arg0); end

  # source://jwt//lib/jwt/jwa/none.rb#16
  def verify(*_arg0); end
end

# source://jwt//lib/jwt/jwa/ps.rb#5
class JWT::JWA::Ps
  include ::JWT::JWA::SigningAlgorithm
  include ::JWT::JWA::Compat
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods
  extend ::JWT::JWA::Compat::ClassMethods

  # @return [Ps] a new instance of Ps
  #
  # source://jwt//lib/jwt/jwa/ps.rb#8
  def initialize(alg); end

  # source://jwt//lib/jwt/jwa/ps.rb#13
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/ps.rb#21
  def verify(data:, signature:, verification_key:); end

  private

  # Returns the value of attribute digest_algorithm.
  #
  # source://jwt//lib/jwt/jwa/ps.rb#33
  def digest_algorithm; end
end

# source://jwt//lib/jwt/jwa/rsa.rb#5
class JWT::JWA::Rsa
  include ::JWT::JWA::SigningAlgorithm
  include ::JWT::JWA::Compat
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods
  extend ::JWT::JWA::Compat::ClassMethods

  # @return [Rsa] a new instance of Rsa
  #
  # source://jwt//lib/jwt/jwa/rsa.rb#8
  def initialize(alg); end

  # source://jwt//lib/jwt/jwa/rsa.rb#13
  def sign(data:, signing_key:); end

  # source://jwt//lib/jwt/jwa/rsa.rb#21
  def verify(data:, signature:, verification_key:); end

  private

  # Returns the value of attribute digest.
  #
  # source://jwt//lib/jwt/jwa/rsa.rb#33
  def digest; end
end

# source://jwt//lib/jwt/jwa/signing_algorithm.rb#5
module JWT::JWA::SigningAlgorithm
  include ::JWT::JWA::Compat

  mixes_in_class_methods ::JWT::JWA::SigningAlgorithm::ClassMethods
  mixes_in_class_methods ::JWT::JWA::Compat::ClassMethods

  # Returns the value of attribute alg.
  #
  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#17
  def alg; end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#23
  def header(*_arg0); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#39
  def raise_sign_error!(message); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#35
  def raise_verify_error!(message); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#27
  def sign(*_arg0); end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#19
  def valid_alg?(alg_to_check); end

  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#31
  def verify(*_arg0); end

  class << self
    # @private
    #
    # source://jwt//lib/jwt/jwa/signing_algorithm.rb#12
    def included(klass); end
  end
end

# source://jwt//lib/jwt/jwa/signing_algorithm.rb#6
module JWT::JWA::SigningAlgorithm::ClassMethods
  # source://jwt//lib/jwt/jwa/signing_algorithm.rb#7
  def register_algorithm(algo); end
end

# source://jwt//lib/jwt/jwa/unsupported.rb#5
module JWT::JWA::Unsupported
  extend ::JWT::JWA::SigningAlgorithm
  extend ::JWT::JWA::Compat

  class << self
    # source://jwt//lib/jwt/jwa/unsupported.rb#9
    def sign(*_arg0); end

    # @raise [JWT::VerificationError]
    #
    # source://jwt//lib/jwt/jwa/unsupported.rb#13
    def verify(*_arg0); end
  end
end

# source://jwt//lib/jwt/jwa/wrapper.rb#5
class JWT::JWA::Wrapper
  include ::JWT::JWA::SigningAlgorithm
  include ::JWT::JWA::Compat
  extend ::JWT::JWA::SigningAlgorithm::ClassMethods
  extend ::JWT::JWA::Compat::ClassMethods

  # @return [Wrapper] a new instance of Wrapper
  #
  # source://jwt//lib/jwt/jwa/wrapper.rb#8
  def initialize(algorithm); end

  # source://jwt//lib/jwt/jwa/wrapper.rb#12
  def alg; end

  # source://jwt//lib/jwt/jwa/wrapper.rb#24
  def header(*args, **kwargs); end

  # source://jwt//lib/jwt/jwa/wrapper.rb#30
  def sign(*args, **kwargs); end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwa/wrapper.rb#18
  def valid_alg?(alg_to_check); end

  # source://jwt//lib/jwt/jwa/wrapper.rb#36
  def verify(*args, **kwargs); end
end

# source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#4
module JWT::JWK
  class << self
    # source://jwt//lib/jwt/jwk.rb#24
    def classes; end

    # source://jwt//lib/jwt/jwk.rb#9
    def create_from(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://jwt//lib/jwt/jwk.rb#9
    def import(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

    # source://jwt//lib/jwt/jwk.rb#9
    def new(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

    private

    # source://jwt//lib/jwt/jwk.rb#38
    def generate_mappings; end

    # source://jwt//lib/jwt/jwk.rb#34
    def mappings; end
  end
end

# source://jwt//lib/jwt/jwk/ec.rb#7
class JWT::JWK::EC < ::JWT::JWK::KeyBase
  # @return [EC] a new instance of EC
  #
  # source://jwt//lib/jwt/jwk/ec.rb#16
  def initialize(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/ec.rb#67
  def []=(key, value); end

  # source://jwt//lib/jwt/jwk/ec.rb#54
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/ec.rb#60
  def key_digest; end

  # source://jwt//lib/jwt/jwk/ec.rb#30
  def keypair; end

  # source://jwt//lib/jwt/jwk/ec.rb#50
  def members; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwk/ec.rb#34
  def private?; end

  # source://jwt//lib/jwt/jwk/ec.rb#46
  def public_key; end

  # source://jwt//lib/jwt/jwk/ec.rb#38
  def signing_key; end

  # source://jwt//lib/jwt/jwk/ec.rb#42
  def verify_key; end

  private

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/ec.rb#95
  def check_jwk_params!(key_params, params); end

  # source://jwt//lib/jwt/jwk/ec.rb#145
  def create_ec_key(jwk_crv, jwk_x, jwk_y, jwk_d); end

  # source://jwt//lib/jwt/jwk/ec.rb#208
  def decode_octets(base64_encoded_coordinate); end

  # source://jwt//lib/jwt/jwk/ec.rb#77
  def ec_key; end

  # source://jwt//lib/jwt/jwk/ec.rb#122
  def encode_octets(octets); end

  # source://jwt//lib/jwt/jwk/ec.rb#128
  def encode_open_ssl_bn(key_part); end

  # source://jwt//lib/jwt/jwk/ec.rb#81
  def extract_key_params(key); end

  # source://jwt//lib/jwt/jwk/ec.rb#101
  def keypair_components(ec_keypair); end

  # source://jwt//lib/jwt/jwk/ec.rb#132
  def parse_ec_key(key); end

  class << self
    # source://jwt//lib/jwt/jwk/ec.rb#232
    def import(jwk_data); end

    # source://jwt//lib/jwt/jwk/ec.rb#236
    def to_openssl_curve(crv); end
  end
end

# source://jwt//lib/jwt/jwk/ec.rb#10
JWT::JWK::EC::BINARY = T.let(T.unsafe(nil), Integer)

# source://jwt//lib/jwt/jwk/ec.rb#13
JWT::JWK::EC::EC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#12
JWT::JWK::EC::EC_PRIVATE_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#11
JWT::JWK::EC::EC_PUBLIC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#8
JWT::JWK::EC::KTY = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/jwk/ec.rb#9
JWT::JWK::EC::KTYS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/ec.rb#14
JWT::JWK::EC::ZERO_BYTE = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/jwk/hmac.rb#5
class JWT::JWK::HMAC < ::JWT::JWK::KeyBase
  # @return [HMAC] a new instance of HMAC
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#12
  def initialize(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/hmac.rb#63
  def []=(key, value); end

  # See https://tools.ietf.org/html/rfc7517#appendix-A.3
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#47
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/hmac.rb#57
  def key_digest; end

  # source://jwt//lib/jwt/jwk/hmac.rb#26
  def keypair; end

  # source://jwt//lib/jwt/jwk/hmac.rb#53
  def members; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#30
  def private?; end

  # source://jwt//lib/jwt/jwk/hmac.rb#34
  def public_key; end

  # source://jwt//lib/jwt/jwk/hmac.rb#42
  def signing_key; end

  # source://jwt//lib/jwt/jwk/hmac.rb#38
  def verify_key; end

  private

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/hmac.rb#90
  def check_jwk(keypair, params); end

  # source://jwt//lib/jwt/jwk/hmac.rb#77
  def extract_key_params(key); end

  # source://jwt//lib/jwt/jwk/hmac.rb#73
  def secret; end

  class << self
    # source://jwt//lib/jwt/jwk/hmac.rb#97
    def import(jwk_data); end
  end
end

# source://jwt//lib/jwt/jwk/hmac.rb#10
JWT::JWK::HMAC::HMAC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/hmac.rb#9
JWT::JWK::HMAC::HMAC_PRIVATE_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/hmac.rb#8
JWT::JWK::HMAC::HMAC_PUBLIC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/hmac.rb#6
JWT::JWK::HMAC::KTY = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/jwk/hmac.rb#7
JWT::JWK::HMAC::KTYS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/key_base.rb#5
class JWT::JWK::KeyBase
  # @return [KeyBase] a new instance of KeyBase
  #
  # source://jwt//lib/jwt/jwk/key_base.rb#11
  def initialize(options, params = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/key_base.rb#46
  def <=>(other); end

  # source://jwt//lib/jwt/jwk/key_base.rb#40
  def ==(other); end

  # source://jwt//lib/jwt/jwk/key_base.rb#32
  def [](key); end

  # source://jwt//lib/jwt/jwk/key_base.rb#36
  def []=(key, value); end

  # source://jwt//lib/jwt/jwk/key_base.rb#40
  def eql?(other); end

  # source://jwt//lib/jwt/jwk/key_base.rb#28
  def hash; end

  # source://jwt//lib/jwt/jwk/key_base.rb#24
  def kid; end

  private

  # Returns the value of attribute parameters.
  #
  # source://jwt//lib/jwt/jwk/key_base.rb#54
  def parameters; end

  class << self
    # @private
    #
    # source://jwt//lib/jwt/jwk/key_base.rb#6
    def inherited(klass); end
  end
end

# source://jwt//lib/jwt/jwk/key_finder.rb#5
class JWT::JWK::KeyFinder
  # @return [KeyFinder] a new instance of KeyFinder
  #
  # source://jwt//lib/jwt/jwk/key_finder.rb#6
  def initialize(options); end

  # @raise [::JWT::DecodeError]
  #
  # source://jwt//lib/jwt/jwk/key_finder.rb#17
  def key_for(kid); end

  private

  # source://jwt//lib/jwt/jwk/key_finder.rb#31
  def resolve_key(kid); end
end

# source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#5
class JWT::JWK::KidAsKeyDigest
  # @return [KidAsKeyDigest] a new instance of KidAsKeyDigest
  #
  # source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#6
  def initialize(jwk); end

  # source://jwt//lib/jwt/jwk/kid_as_key_digest.rb#10
  def generate; end
end

# source://jwt//lib/jwt/jwk/rsa.rb#5
class JWT::JWK::RSA < ::JWT::JWK::KeyBase
  # @return [RSA] a new instance of RSA
  #
  # source://jwt//lib/jwt/jwk/rsa.rb#16
  def initialize(key, params = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/rsa.rb#66
  def []=(key, value); end

  # source://jwt//lib/jwt/jwk/rsa.rb#50
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/rsa.rb#60
  def key_digest; end

  # source://jwt//lib/jwt/jwk/rsa.rb#30
  def keypair; end

  # source://jwt//lib/jwt/jwk/rsa.rb#56
  def members; end

  # @return [Boolean]
  #
  # source://jwt//lib/jwt/jwk/rsa.rb#34
  def private?; end

  # source://jwt//lib/jwt/jwk/rsa.rb#38
  def public_key; end

  # source://jwt//lib/jwt/jwk/rsa.rb#42
  def signing_key; end

  # source://jwt//lib/jwt/jwk/rsa.rb#46
  def verify_key; end

  private

  # @raise [ArgumentError]
  #
  # source://jwt//lib/jwt/jwk/rsa.rb#94
  def check_jwk_params!(key_params, params); end

  # source://jwt//lib/jwt/jwk/rsa.rb#126
  def decode_open_ssl_bn(jwk_data); end

  # source://jwt//lib/jwt/jwk/rsa.rb#120
  def encode_open_ssl_bn(key_part); end

  # source://jwt//lib/jwt/jwk/rsa.rb#80
  def extract_key_params(key); end

  # source://jwt//lib/jwt/jwk/rsa.rb#114
  def jwk_attributes(*attributes); end

  # source://jwt//lib/jwt/jwk/rsa.rb#100
  def parse_rsa_key(key); end

  # source://jwt//lib/jwt/jwk/rsa.rb#76
  def rsa_key; end

  class << self
    # source://jwt//lib/jwt/jwk/rsa.rb#141
    def create_rsa_key(rsa_parameters); end

    # source://jwt//lib/jwt/jwk/rsa.rb#169
    def create_rsa_key_using_accessors(rsa_parameters); end

    # source://jwt//lib/jwt/jwk/rsa.rb#141
    def create_rsa_key_using_der(rsa_parameters); end

    # source://jwt//lib/jwt/jwk/rsa.rb#159
    def create_rsa_key_using_sets(rsa_parameters); end

    # source://jwt//lib/jwt/jwk/rsa.rb#135
    def decode_open_ssl_bn(jwk_data); end

    # source://jwt//lib/jwt/jwk/rsa.rb#131
    def import(jwk_data); end

    # @raise [JWT::JWKError]
    #
    # source://jwt//lib/jwt/jwk/rsa.rb#184
    def validate_rsa_parameters!(rsa_parameters); end
  end
end

# source://jwt//lib/jwt/jwk/rsa.rb#6
JWT::JWK::RSA::BINARY = T.let(T.unsafe(nil), Integer)

# source://jwt//lib/jwt/jwk/rsa.rb#7
JWT::JWK::RSA::KTY = T.let(T.unsafe(nil), String)

# source://jwt//lib/jwt/jwk/rsa.rb#8
JWT::JWK::RSA::KTYS = T.let(T.unsafe(nil), Array)

# https://www.rfc-editor.org/rfc/rfc3447#appendix-A.1.2
#
# source://jwt//lib/jwt/jwk/rsa.rb#14
JWT::JWK::RSA::RSA_ASN1_SEQUENCE = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#11
JWT::JWK::RSA::RSA_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#13
JWT::JWK::RSA::RSA_OPT_PARAMS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#10
JWT::JWK::RSA::RSA_PRIVATE_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/rsa.rb#9
JWT::JWK::RSA::RSA_PUBLIC_KEY_ELEMENTS = T.let(T.unsafe(nil), Array)

# source://jwt//lib/jwt/jwk/set.rb#7
class JWT::JWK::Set
  include ::Enumerable
  extend ::Forwardable

  # @return [Set] a new instance of Set
  #
  # source://jwt//lib/jwt/jwk/set.rb#13
  def initialize(jwks = T.unsafe(nil), options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/set.rb#58
  def +(enum); end

  # source://jwt//lib/jwt/jwk/set.rb#62
  def <<(key); end

  # source://jwt//lib/jwt/jwk/set.rb#67
  def ==(other); end

  # source://jwt//lib/jwt/jwk/set.rb#62
  def add(key); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def delete(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def dig(*args, **_arg1, &block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def each(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#67
  def eql?(other); end

  # source://jwt//lib/jwt/jwk/set.rb#31
  def export(options = T.unsafe(nil)); end

  # source://jwt//lib/jwt/jwk/set.rb#37
  def filter!(&block); end

  # Returns the value of attribute keys.
  #
  # source://jwt//lib/jwt/jwk/set.rb#11
  def keys; end

  # source://forwardable/1.3.3/forwardable.rb#231
  def length(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#53
  def merge(enum); end

  # source://jwt//lib/jwt/jwk/set.rb#43
  def reject!(&block); end

  # source://jwt//lib/jwt/jwk/set.rb#37
  def select!(&block); end

  # source://forwardable/1.3.3/forwardable.rb#231
  def size(*args, **_arg1, &block); end

  # source://jwt//lib/jwt/jwk/set.rb#58
  def union(enum); end

  # source://jwt//lib/jwt/jwk/set.rb#49
  def uniq!(&block); end

  # For symbolic manipulation
  #
  # source://jwt//lib/jwt/jwk/set.rb#58
  def |(enum); end
end

# https://tools.ietf.org/html/rfc7638
#
# source://jwt//lib/jwt/jwk/thumbprint.rb#6
class JWT::JWK::Thumbprint
  # @return [Thumbprint] a new instance of Thumbprint
  #
  # source://jwt//lib/jwt/jwk/thumbprint.rb#9
  def initialize(jwk); end

  # source://jwt//lib/jwt/jwk/thumbprint.rb#13
  def generate; end

  # Returns the value of attribute jwk.
  #
  # source://jwt//lib/jwt/jwk/thumbprint.rb#7
  def jwk; end

  # source://jwt//lib/jwt/jwk/thumbprint.rb#13
  def to_s; end
end

# source://jwt//lib/jwt/error.rb#22
class JWT::JWKError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#19
class JWT::MissingRequiredClaim < ::JWT::DecodeError; end

# source://jwt//lib/jwt/error.rb#6
class JWT::RequiredDependencyError < ::StandardError; end

# source://jwt//lib/jwt/error.rb#13
class JWT::UnsupportedEcdsaCurve < ::JWT::IncorrectAlgorithm; end

# Moments version builder module
#
# source://jwt//lib/jwt/version.rb#10
module JWT::VERSION; end

# major version
#
# source://jwt//lib/jwt/version.rb#12
JWT::VERSION::MAJOR = T.let(T.unsafe(nil), Integer)

# minor version
#
# source://jwt//lib/jwt/version.rb#14
JWT::VERSION::MINOR = T.let(T.unsafe(nil), Integer)

# alpha, beta, etc. tag
#
# source://jwt//lib/jwt/version.rb#18
JWT::VERSION::PRE = T.let(T.unsafe(nil), T.untyped)

# Build version string
#
# source://jwt//lib/jwt/version.rb#21
JWT::VERSION::STRING = T.let(T.unsafe(nil), String)

# tiny version
#
# source://jwt//lib/jwt/version.rb#16
JWT::VERSION::TINY = T.let(T.unsafe(nil), Integer)

# source://jwt//lib/jwt/error.rb#8
class JWT::VerificationError < ::JWT::DecodeError; end

# source://jwt//lib/jwt/verify.rb#6
class JWT::Verify
  # @return [Verify] a new instance of Verify
  #
  # source://jwt//lib/jwt/verify.rb#23
  def initialize(payload, options); end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_aud; end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_expiration; end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_iat; end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_iss; end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_jti; end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_not_before; end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_required_claims; end

  # source://jwt//lib/jwt/verify.rb#29
  def verify_sub; end

  class << self
    # source://jwt//lib/jwt/verify.rb#12
    def verify_aud(payload, options); end

    # source://jwt//lib/jwt/verify.rb#17
    def verify_claims(payload, options); end

    # source://jwt//lib/jwt/verify.rb#12
    def verify_expiration(payload, options); end

    # source://jwt//lib/jwt/verify.rb#12
    def verify_iat(payload, options); end

    # source://jwt//lib/jwt/verify.rb#12
    def verify_iss(payload, options); end

    # source://jwt//lib/jwt/verify.rb#12
    def verify_jti(payload, options); end

    # source://jwt//lib/jwt/verify.rb#12
    def verify_not_before(payload, options); end

    # source://jwt//lib/jwt/verify.rb#12
    def verify_required_claims(payload, options); end

    # source://jwt//lib/jwt/verify.rb#12
    def verify_sub(payload, options); end
  end
end

# source://jwt//lib/jwt/verify.rb#7
JWT::Verify::DEFAULTS = T.let(T.unsafe(nil), Hash)

# source://jwt//lib/jwt/verify.rb#8
JWT::Verify::METHODS = T.let(T.unsafe(nil), Array)

# If the x5c header certificate chain can be validated by trusted root
# certificates, and none of the certificates are revoked, returns the public
# key from the first certificate.
# See https://tools.ietf.org/html/rfc7515#section-4.1.6
#
# source://jwt//lib/jwt/x5c_key_finder.rb#8
class JWT::X5cKeyFinder
  # @raise [ArgumentError]
  # @return [X5cKeyFinder] a new instance of X5cKeyFinder
  #
  # source://jwt//lib/jwt/x5c_key_finder.rb#9
  def initialize(root_certificates, crls = T.unsafe(nil)); end

  # source://jwt//lib/jwt/x5c_key_finder.rb#15
  def from(x5c_header_or_certificates); end

  private

  # source://jwt//lib/jwt/x5c_key_finder.rb#33
  def build_store(root_certificates, crls); end

  # source://jwt//lib/jwt/x5c_key_finder.rb#42
  def parse_certificates(x5c_header_or_certificates); end
end
